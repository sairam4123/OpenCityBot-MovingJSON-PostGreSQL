{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"se",
				"sessions"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import os\nfrom contextlib import \nfrom typing import Union\n\nimport discord\nfrom discord.ext import commands\n\nfrom .utils.list_manipulation import insert_or_append, pop_or_remove\n\n\nclass System(commands.Cog):\n\n    def __init__(self, bot):\n        self.bot = bot\n        self._last_result = None\n        self.sessions = set()\n\n    async def cog_check(self, ctx):\n        return await self.bot.is_owner(ctx.author)\n\n    @commands.command(help='Blacklists a member from using the bot.')\n    @commands.is_owner()\n    async def blacklist(self, ctx: commands.Context, member_or_user: Union[discord.User, discord.Member], *, reason: str):\n        black_listed_users = await self.bot.pg_conn.fetchval(\"\"\"\n        SELECT black_listed_users FROM black_listed_users_data\n        \"\"\")\n        if not black_listed_users:\n            await self.bot.pg_conn.execute(\"\"\"\n            INSERT INTO black_listed_users_data\n            VALUES ($1, 1)\n            \"\"\", [])\n        black_listed_users, member_or_user_id, index = insert_or_append(black_listed_users, member_or_user.id)\n        await self.bot.pg_conn.execute(\"\"\"\n        UPDATE black_listed_users_data\n        SET black_listed_users = $1\n        WHERE row_id = 1\n        \"\"\", black_listed_users)\n        reason = reason.strip('\"')\n        await ctx.send(f\"I have blacklisted **{member_or_user}** because of {reason}\")\n\n    @commands.command(help='Unblacklists a member from using the bot.')\n    @commands.is_owner()\n    async def unblacklist(self, ctx: commands.Context, member_or_user: Union[discord.User, discord.Member], *, reason: str):\n        black_listed_users = await self.bot.pg_conn.fetchval(\"\"\"\n            SELECT black_listed_users FROM black_listed_users_data\n            \"\"\")\n        if not black_listed_users:\n            await self.bot.pg_conn.execute(\"\"\"\n                INSERT INTO black_listed_users_data\n                VALUES ($1, 1)\n                \"\"\", [])\n        black_listed_users, member_or_user_id, index = pop_or_remove(black_listed_users, member_or_user.id)\n        await self.bot.pg_conn.execute(\"\"\"\n            UPDATE black_listed_users_data\n            SET black_listed_users = $1\n            WHERE row_id = 1\n            \"\"\", black_listed_users)\n        reason = reason.strip('\"')\n        await ctx.send(f\"I have unblacklisted **{member_or_user}** because of \\\"{reason}\\\".\")\n\n    @commands.command(help=\"Reloads all cogs.\")\n    @commands.is_owner()\n    async def reload_all_extensions(self, ctx):\n        original_dir = os.getcwd()\n        os.chdir('..')\n        for filename1 in os.listdir('Bot/cogs'):\n            if filename1.endswith('.py') and not (filename1.startswith('__') or filename1.startswith('_')):\n                self.bot.unload_extension(f'Bot.cogs.{filename1[:-3]}')\n                self.bot.load_extension(f'Bot.cogs.{filename1[:-3]}')\n        await ctx.send(\"Reloaded all extensions!\")\n        os.chdir(original_dir)\n\n    @commands.command(name='eval')\n    async def _eval(self, ctx, *, body: str):\n        \"\"\"Evaluates a code\"\"\"\n\n        env = {\n            'bot': self.bot,\n            'ctx': ctx,\n            'channel': ctx.channel,\n            'author': ctx.author,\n            'guild': ctx.guild,\n            'message': ctx.message,\n            '_': self._last_result\n        }\n\n        env.update(globals())\n\n        body = self.cleanup_code(body)\n        stdout = io.StringIO()\n\n        to_compile = f'async def func():\\n{textwrap.indent(body, \"  \")}'\n\n        try:\n            exec(to_compile, env)\n        except Exception as e:\n            return await ctx.send(f'```py\\n{e.__class__.__name__}: {e}\\n```')\n\n        func = env['func']\n        try:\n            with redirect_stdout(stdout):\n                ret = await func()\n        except Exception as e:\n            value = stdout.getvalue()\n            await ctx.send(f'```py\\n{value}{traceback.format_exc()}\\n```')\n        else:\n            value = stdout.getvalue()\n            try:\n                await ctx.message.add_reaction('\\u2705')\n            except:\n                pass\n\n            if ret is None:\n                if value:\n                    await ctx.send(f'```py\\n{value}\\n```')\n            else:\n                self._last_result = ret\n                await ctx.send(f'```py\\n{value}{ret}\\n```')\n\n    @commands.command()\n    async def repl(self, ctx):\n        \"\"\"Launches an interactive REPL session.\"\"\"\n        variables = {\n            'ctx': ctx,\n            'bot': self.bot,\n            'message': ctx.message,\n            'guild': ctx.guild,\n            'channel': ctx.channel,\n            'author': ctx.author,\n            '_': None,\n        }\n\n        if ctx.channel.id in self.sessions:\n            await ctx.send('Already running a REPL session in this channel. Exit it with `quit`.')\n            return\n\n        self.sessions.add(ctx.channel.id)\n        await ctx.send('Enter code to execute or evaluate. `exit()` or `quit` to exit.')\n\n        def check(m):\n            return m.author.id == ctx.author.id and \\\n                   m.channel.id == ctx.channel.id and \\\n                   m.content.startswith('`')\n\n        while True:\n            try:\n                response = await self.bot.wait_for('message', check=check, timeout=10.0 * 60.0)\n            except asyncio.TimeoutError:\n                await ctx.send('Exiting REPL session.')\n                self.sessions.remove(ctx.channel.id)\n                break\n\n            cleaned = self.cleanup_code(response.content)\n\n            if cleaned in ('quit', 'exit', 'exit()'):\n                await ctx.send('Exiting.')\n                self.sessions.remove(ctx.channel.id)\n                return\n\n            executor = exec\n            if cleaned.count('\\n') == 0:\n                # single statement, potentially 'eval'\n                try:\n                    code = compile(cleaned, '<repl session>', 'eval')\n                except SyntaxError:\n                    pass\n                else:\n                    executor = eval\n\n            if executor is exec:\n                try:\n                    code = compile(cleaned, '<repl session>', 'exec')\n                except SyntaxError as e:\n                    await ctx.send(self.get_syntax_error(e))\n                    continue\n\n            variables['message'] = response\n\n            fmt = None\n            stdout = io.StringIO()\n\n            try:\n                with redirect_stdout(stdout):\n                    result = executor(code, variables)\n                    if inspect.isawaitable(result):\n                        result = await result\n            except Exception as e:\n                value = stdout.getvalue()\n                fmt = f'```py\\n{value}{traceback.format_exc()}\\n```'\n            else:\n                value = stdout.getvalue()\n                if result is not None:\n                    fmt = f'```py\\n{value}{result}\\n```'\n                    variables['_'] = result\n                elif value:\n                    fmt = f'```py\\n{value}\\n```'\n\n            try:\n                if fmt is not None:\n                    if len(fmt) > 2000:\n                        await ctx.send('Content too big to be printed.')\n                    else:\n                        await ctx.send(fmt)\n            except discord.Forbidden:\n                pass\n            except discord.HTTPException as e:\n                await ctx.send(f'Unexpected error: `{e}`')\n\n\n\ndef setup(bot):\n    bot.add_cog(System(bot))\n",
			"file": "cogs/System.py",
			"file_size": 7642,
			"file_write_time": 132401712373798696,
			"settings":
			{
				"buffer_size": 7422,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "{\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"path\": \"F:\\\\PyCharm Python Works\\\\OpenCityBot-MovingJSON-PostgreSQL\"\n\t\t}\n\t]\n}\n",
			"file": "cogs/opencity.sublime-project",
			"file_size": 103,
			"file_write_time": 132401738098710789,
			"settings":
			{
				"buffer_size": 103,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"path\": \"F:\\\\PyCharm Python Works\\\\OpenCityBot-MovingJSON-PostgreSQL\"\n\t\t}\n\t]\n}\n",
			"file": "opencity.sublime-project",
			"file_size": 103,
			"file_write_time": 132401738321919486,
			"settings":
			{
				"buffer_size": 103,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pi",
				"Package Control: Install Package"
			],
			[
				"auto",
				"Toggle AutoSave: all files"
			],
			[
				"livereload",
				"LiveReload: Enable/disable plug-ins"
			],
			[
				"activa",
				"Material Theme: Activate theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"Preferences: Key Bin",
				"Preferences: Key Bindings"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"syntax dot",
				"Set Syntax: DotENV"
			],
			[
				"syntax bash se",
				"Set Syntax: Bourne Again Shell (bash)"
			],
			[
				"syntax do",
				"Set Syntax: DotENV"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pgcli",
				"Package Control: Install Package"
			],
			[
				"sql",
				"Set Syntax: SQL"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/PyCharm Python Works/OpenCityBot-MovingJSON-PostgreSQL",
		"/F/PyCharm Python Works/OpenCityBot-MovingJSON-PostgreSQL/development",
		"/F/PyCharm Python Works/OpenCityBot-MovingJSON-PostgreSQL/development/Bot",
		"/F/PyCharm Python Works/OpenCityBot-MovingJSON-PostgreSQL/development/Bot/cogs"
	],
	"file_history":
	[
		"/C/Users/kanna/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/kanna/AppData/Roaming/Sublime Merge/Packages/User/Commit Message.sublime-settings",
		"/F/PyCharm Python Works/Community-Bot-Discord/Bot/cogs/Starboard.py",
		"/F/PyCharm Python Works/Community-Bot-Discord/Bot/cogs/Mention_Reply.py"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cogs/System.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7422,
						"regions":
						{
						},
						"selection":
						[
							[
								806,
								806
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "cogs/opencity.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 103,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"auto_complete": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										101,
										102
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "opencity.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 103,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										101,
										102
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 68.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "opencity.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 262.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
